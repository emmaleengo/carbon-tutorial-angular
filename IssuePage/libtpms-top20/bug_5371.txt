#5371
src/tpm12/tpm_delegate.c:3807: error: Buffer Overrun L3
  Offset added: [1, +oo] (⇐ [0, +oo] + [1, +oo]) Size: [0, +oo] by call to `TPM_DelegateOwnerBlob_Load`.

src/tpm12/tpm_delegate.c:3757:15: Call
3755.     /* get delegation parameter */
3756.     if (returnCode == TPM_SUCCESS) {
3757. 	returnCode = TPM_SizedBuffer_Load(&delegation, &command, &paramSize);
                    ^
3758.     }
3759.     /* save the ending point of inParam's for authorization and auditing */

src/tpm12/tpm_sizedbuffer.c:75:1: Parameter `tpm_sized_buffer->buffer`
  73. */
  74. 
  75. TPM_RESULT TPM_SizedBuffer_Load(TPM_SIZED_BUFFER *tpm_sized_buffer,     /* result */
      ^
  76.                                 unsigned char **stream,		/* pointer to next parameter */
  77.                                 uint32_t *stream_size)		/* stream size left */

src/tpm12/tpm_delegate.c:3800:2: Assignment
3798.     if (returnCode == TPM_SUCCESS) {
3799. 	/* use a temporary copy so the original values are not moved */
3800. 	stream = delegation.buffer;
       ^
3801. 	stream_size = delegation.size;
3802. 	switch (d1Tag) {

src/tpm12/tpm_delegate.c:3807:16: Call
3805. 	    /* a. Map D1 a TPM_DELEGATE_BLOB_OWNER to delegation */
3806. 	    if (returnCode == TPM_SUCCESS) {
3807. 		returnCode = TPM_DelegateOwnerBlob_Load(&d1DelegateOwnerBlob,
                     ^
3808. 							&stream, &stream_size);
3809. 	    }

src/tpm12/tpm_delegate.c:685:1: Parameter `stream`
  683. */
  684. 
  685. TPM_RESULT TPM_DelegateOwnerBlob_Load(TPM_DELEGATE_OWNER_BLOB *tpm_delegate_owner_blob,
       ^
  686. 				      unsigned char **stream,
  687. 				      uint32_t *stream_size)

src/tpm12/tpm_delegate.c:694:7: Call
  692.     /* check tag */
  693.     if (rc == 0) {
  694. 	rc = TPM_CheckTag(TPM_TAG_DELEGATE_OWNER_BLOB, stream, stream_size);
             ^
  695.     }
  696.     /* load pub */

src/tpm12/tpm_load.c:291:1: Parameter `stream`
    289. */
    290. 
    291. TPM_RESULT TPM_CheckTag(TPM_STRUCTURE_TAG expectedTag,
         ^
    292. 			unsigned char **stream,
    293. 			uint32_t   *stream_size)

src/tpm12/tpm_load.c:299:14: Call
    297.                            
    298.     if (rc == 0) {      
    299.         rc = TPM_Load16(&tag, stream, stream_size);
                      ^
    300.     }
    301.     if (rc == 0) {

src/tpm12/tpm_load.c:122:1: Parameter `stream`
      120. */
      121. 
      122. TPM_RESULT TPM_Load16(uint16_t *tpm_uint16,
           ^
      123.                       unsigned char **stream,
      124.                       uint32_t *stream_size)

src/tpm12/tpm_delegate.c:714:7: Call
  712.     /* load additionalArea */
  713.     if (rc == 0) {
  714. 	rc = TPM_SizedBuffer_Load(&(tpm_delegate_owner_blob->additionalArea), stream, stream_size);
             ^
  715.     }
  716.     /* load sensitiveArea */

src/tpm12/tpm_sizedbuffer.c:83:14: Call
    81.     printf("  TPM_SizedBuffer_Load:\n");
    82.     if (rc == 0) {
    83.         rc = TPM_Load32(&(tpm_sized_buffer->size), stream, stream_size);
                     ^
    84.     }
    85.     /* if the size is not 0 */

src/tpm12/tpm_load.c:93:1: Parameter `tpm_uint32`
      91. */
      92. 
      93. TPM_RESULT TPM_Load32(uint32_t *tpm_uint32,
          ^
      94.                       unsigned char **stream,
      95.                       uint32_t *stream_size)

src/tpm12/tpm_sizedbuffer.c:93:18: Call
    91.         /* copy the buffer */
    92.         if (rc == 0) {
    93.             rc = TPM_Loadn(tpm_sized_buffer->buffer, tpm_sized_buffer->size, stream, stream_size);
                         ^
    94.         }
    95.     }

src/tpm12/tpm_load.c:202:1: <Offset trace>
200.    no endian adjustments. */
201. 
202. TPM_RESULT TPM_Loadn(BYTE *data,
     ^
203.                      size_t data_length,
204.                      unsigned char **stream,

src/tpm12/tpm_load.c:202:1: Parameter `data_length`
      200.    no endian adjustments. */
      201. 
      202. TPM_RESULT TPM_Loadn(BYTE *data,
           ^
      203.                      size_t data_length,
      204.                      unsigned char **stream,

src/tpm12/tpm_load.c:202:1: <Length trace>
200.    no endian adjustments. */
201. 
202. TPM_RESULT TPM_Loadn(BYTE *data,
     ^
203.                      size_t data_length,
204.                      unsigned char **stream,

src/tpm12/tpm_load.c:202:1: Parameter `stream`
      200.    no endian adjustments. */
      201. 
      202. TPM_RESULT TPM_Loadn(BYTE *data,
           ^
      203.                      size_t data_length,
      204.                      unsigned char **stream,

src/tpm12/tpm_load.c:218:9: Array access: Offset added: [1, +oo] (⇐ [0, +oo] + [1, +oo]) Size: [0, +oo] by call to `TPM_DelegateOwnerBlob_Load` 
      216.     /* load the parameter */
      217.     if (rc == 0) {
      218.         memcpy(data, *stream, data_length);
                   ^
      219.         *stream += data_length;
      220.         *stream_size -= data_length;
